/* tslint:disable */
/* eslint-disable */
/**
 * Poizon Market Recommendation System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { HTTPValidationError } from '../models';
// @ts-ignore
import type { SearchResponse } from '../models';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить поисковые подсказки
         * @summary Get Search Suggestions
         * @param {string} query 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchSuggestionsApiV1SearchSuggestionsGet: async (query: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getSearchSuggestionsApiV1SearchSuggestionsGet', 'query', query)
            const localVarPath = `/api/v1/search/suggestions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Умный поиск с фильтрами
         * @summary Smart Search
         * @param {string} query 
         * @param {string | null} [category] 
         * @param {number | null} [minPrice] 
         * @param {number | null} [maxPrice] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartSearchApiV1SearchGet: async (query: string, category?: string | null, minPrice?: number | null, maxPrice?: number | null, page?: number, perPage?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('smartSearchApiV1SearchGet', 'query', query)
            const localVarPath = `/api/v1/search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['min_price'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['max_price'] = maxPrice;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить поисковые подсказки
         * @summary Get Search Suggestions
         * @param {string} query 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchSuggestionsApiV1SearchSuggestionsGet(query: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string | null>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchSuggestionsApiV1SearchSuggestionsGet(query, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SearchApi.getSearchSuggestionsApiV1SearchSuggestionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Умный поиск с фильтрами
         * @summary Smart Search
         * @param {string} query 
         * @param {string | null} [category] 
         * @param {number | null} [minPrice] 
         * @param {number | null} [maxPrice] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartSearchApiV1SearchGet(query: string, category?: string | null, minPrice?: number | null, maxPrice?: number | null, page?: number, perPage?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartSearchApiV1SearchGet(query, category, minPrice, maxPrice, page, perPage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SearchApi.smartSearchApiV1SearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * Получить поисковые подсказки
         * @summary Get Search Suggestions
         * @param {SearchApiGetSearchSuggestionsApiV1SearchSuggestionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchSuggestionsApiV1SearchSuggestionsGet(requestParameters: SearchApiGetSearchSuggestionsApiV1SearchSuggestionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<string | null>> {
            return localVarFp.getSearchSuggestionsApiV1SearchSuggestionsGet(requestParameters.query, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Умный поиск с фильтрами
         * @summary Smart Search
         * @param {SearchApiSmartSearchApiV1SearchGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartSearchApiV1SearchGet(requestParameters: SearchApiSmartSearchApiV1SearchGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SearchResponse> {
            return localVarFp.smartSearchApiV1SearchGet(requestParameters.query, requestParameters.category, requestParameters.minPrice, requestParameters.maxPrice, requestParameters.page, requestParameters.perPage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSearchSuggestionsApiV1SearchSuggestionsGet operation in SearchApi.
 * @export
 * @interface SearchApiGetSearchSuggestionsApiV1SearchSuggestionsGetRequest
 */
export interface SearchApiGetSearchSuggestionsApiV1SearchSuggestionsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchApiGetSearchSuggestionsApiV1SearchSuggestionsGet
     */
    readonly query: string

    /**
     * 
     * @type {number}
     * @memberof SearchApiGetSearchSuggestionsApiV1SearchSuggestionsGet
     */
    readonly limit?: number
}

/**
 * Request parameters for smartSearchApiV1SearchGet operation in SearchApi.
 * @export
 * @interface SearchApiSmartSearchApiV1SearchGetRequest
 */
export interface SearchApiSmartSearchApiV1SearchGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SearchApiSmartSearchApiV1SearchGet
     */
    readonly query: string

    /**
     * 
     * @type {string}
     * @memberof SearchApiSmartSearchApiV1SearchGet
     */
    readonly category?: string | null

    /**
     * 
     * @type {number}
     * @memberof SearchApiSmartSearchApiV1SearchGet
     */
    readonly minPrice?: number | null

    /**
     * 
     * @type {number}
     * @memberof SearchApiSmartSearchApiV1SearchGet
     */
    readonly maxPrice?: number | null

    /**
     * 
     * @type {number}
     * @memberof SearchApiSmartSearchApiV1SearchGet
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof SearchApiSmartSearchApiV1SearchGet
     */
    readonly perPage?: number
}

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * Получить поисковые подсказки
     * @summary Get Search Suggestions
     * @param {SearchApiGetSearchSuggestionsApiV1SearchSuggestionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public getSearchSuggestionsApiV1SearchSuggestionsGet(requestParameters: SearchApiGetSearchSuggestionsApiV1SearchSuggestionsGetRequest, options?: RawAxiosRequestConfig) {
        return SearchApiFp(this.configuration).getSearchSuggestionsApiV1SearchSuggestionsGet(requestParameters.query, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Умный поиск с фильтрами
     * @summary Smart Search
     * @param {SearchApiSmartSearchApiV1SearchGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public smartSearchApiV1SearchGet(requestParameters: SearchApiSmartSearchApiV1SearchGetRequest, options?: RawAxiosRequestConfig) {
        return SearchApiFp(this.configuration).smartSearchApiV1SearchGet(requestParameters.query, requestParameters.category, requestParameters.minPrice, requestParameters.maxPrice, requestParameters.page, requestParameters.perPage, options).then((request) => request(this.axios, this.basePath));
    }
}

