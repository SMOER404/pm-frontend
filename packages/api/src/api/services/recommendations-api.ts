/* tslint:disable */
/* eslint-disable */
/**
 * POIZON Market API
 * API документация для маркетплейса POIZON
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ProductResponseDto } from '../models';
// @ts-ignore
import type { UserEventCreateDto } from '../models';
/**
 * RecommendationsApi - axios parameter creator
 * @export
 */
export const RecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Создать событие пользователя
         * @param {UserEventCreateDto} userEventCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserEvent: async (userEventCreateDto: UserEventCreateDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userEventCreateDto' is not null or undefined
            assertParamExists('createUserEvent', 'userEventCreateDto', userEventCreateDto)
            const localVarPath = `/recommendations/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userEventCreateDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить персональные рекомендации
         * @param {string} userId ID пользователя
         * @param {number} [limit] Количество товаров
         * @param {string} [category] Категория товаров
         * @param {string} [brand] Бренд товаров
         * @param {number} [minPrice] Минимальная цена
         * @param {number} [maxPrice] Максимальная цена
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalRecommendations: async (userId: string, limit?: number, category?: string, brand?: string, minPrice?: number, maxPrice?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getPersonalRecommendations', 'userId', userId)
            const localVarPath = `/recommendations/personal/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (brand !== undefined) {
                localVarQueryParameter['brand'] = brand;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['minPrice'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['maxPrice'] = maxPrice;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить популярные товары
         * @param {number} [limit] Количество товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopularItems: async (limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recommendations/popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить похожие товары
         * @param {string} itemId ID товара
         * @param {number} [limit] Количество товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarItems: async (itemId: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('getSimilarItems', 'itemId', itemId)
            const localVarPath = `/recommendations/similar/{itemId}`
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получить трендовые товары
         * @param {number} [limit] Количество товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrendingItems: async (limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recommendations/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecommendationsApi - functional programming interface
 * @export
 */
export const RecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Создать событие пользователя
         * @param {UserEventCreateDto} userEventCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserEvent(userEventCreateDto: UserEventCreateDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserEvent(userEventCreateDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.createUserEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить персональные рекомендации
         * @param {string} userId ID пользователя
         * @param {number} [limit] Количество товаров
         * @param {string} [category] Категория товаров
         * @param {string} [brand] Бренд товаров
         * @param {number} [minPrice] Минимальная цена
         * @param {number} [maxPrice] Максимальная цена
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonalRecommendations(userId: string, limit?: number, category?: string, brand?: string, minPrice?: number, maxPrice?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPersonalRecommendations(userId, limit, category, brand, minPrice, maxPrice, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.getPersonalRecommendations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить популярные товары
         * @param {number} [limit] Количество товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPopularItems(limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPopularItems(limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.getPopularItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить похожие товары
         * @param {string} itemId ID товара
         * @param {number} [limit] Количество товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimilarItems(itemId: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimilarItems(itemId, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.getSimilarItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Получить трендовые товары
         * @param {number} [limit] Количество товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrendingItems(limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrendingItems(limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RecommendationsApi.getTrendingItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RecommendationsApi - factory interface
 * @export
 */
export const RecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecommendationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Создать событие пользователя
         * @param {UserEventCreateDto} userEventCreateDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserEvent(userEventCreateDto: UserEventCreateDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createUserEvent(userEventCreateDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить персональные рекомендации
         * @param {string} userId ID пользователя
         * @param {number} [limit] Количество товаров
         * @param {string} [category] Категория товаров
         * @param {string} [brand] Бренд товаров
         * @param {number} [minPrice] Минимальная цена
         * @param {number} [maxPrice] Максимальная цена
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonalRecommendations(userId: string, limit?: number, category?: string, brand?: string, minPrice?: number, maxPrice?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProductResponseDto>> {
            return localVarFp.getPersonalRecommendations(userId, limit, category, brand, minPrice, maxPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить популярные товары
         * @param {number} [limit] Количество товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPopularItems(limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProductResponseDto>> {
            return localVarFp.getPopularItems(limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить похожие товары
         * @param {string} itemId ID товара
         * @param {number} [limit] Количество товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarItems(itemId: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProductResponseDto>> {
            return localVarFp.getSimilarItems(itemId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Получить трендовые товары
         * @param {number} [limit] Количество товаров
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrendingItems(limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ProductResponseDto>> {
            return localVarFp.getTrendingItems(limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecommendationsApi - object-oriented interface
 * @export
 * @class RecommendationsApi
 * @extends {BaseAPI}
 */
export class RecommendationsApi extends BaseAPI {
    /**
     * 
     * @summary Создать событие пользователя
     * @param {UserEventCreateDto} userEventCreateDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public createUserEvent(userEventCreateDto: UserEventCreateDto, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).createUserEvent(userEventCreateDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить персональные рекомендации
     * @param {string} userId ID пользователя
     * @param {number} [limit] Количество товаров
     * @param {string} [category] Категория товаров
     * @param {string} [brand] Бренд товаров
     * @param {number} [minPrice] Минимальная цена
     * @param {number} [maxPrice] Максимальная цена
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public getPersonalRecommendations(userId: string, limit?: number, category?: string, brand?: string, minPrice?: number, maxPrice?: number, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).getPersonalRecommendations(userId, limit, category, brand, minPrice, maxPrice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить популярные товары
     * @param {number} [limit] Количество товаров
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public getPopularItems(limit?: number, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).getPopularItems(limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить похожие товары
     * @param {string} itemId ID товара
     * @param {number} [limit] Количество товаров
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public getSimilarItems(itemId: string, limit?: number, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).getSimilarItems(itemId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Получить трендовые товары
     * @param {number} [limit] Количество товаров
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecommendationsApi
     */
    public getTrendingItems(limit?: number, options?: RawAxiosRequestConfig) {
        return RecommendationsApiFp(this.configuration).getTrendingItems(limit, options).then((request) => request(this.axios, this.basePath));
    }
}

