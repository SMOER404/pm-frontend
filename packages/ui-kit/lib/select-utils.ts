"use client"

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Select –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
import { useState } from "react"

export interface SelectOption {
  value: string
  label: string
  disabled?: boolean
  icon?: React.ReactNode
  description?: string
}

export interface SelectGroup {
  label: string
  options: SelectOption[]
  disabled?: boolean
}

export type SelectData = SelectOption[] | SelectGroup[]

export interface SelectState {
  isOpen: boolean
  searchValue: string
  selectedValues: string[]
  highlightedIndex: number
}

export interface SelectActions {
  open: () => void
  close: () => void
  toggle: () => void
  setSearchValue: (value: string) => void
  selectValue: (value: string) => void
  deselectValue: (value: string) => void
  clearSelection: () => void
  highlightIndex: (index: number) => void
  highlightNext: () => void
  highlightPrevious: () => void
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –æ–ø—Ü–∏–∏ –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
 * @param data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * @param searchValue - –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param searchFields - –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 */
export function filterSelectData(
  data: SelectData,
  searchValue: string,
  searchFields: ('label' | 'description')[] = ['label']
): SelectData {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
  if (!data) {
    console.error('filterSelectData: data is undefined or null')
    return []
  }

  if (!searchValue.trim()) {
    return data
  }

  const searchLower = searchValue.toLowerCase()

  const filterOptions = (options: SelectOption[]): SelectOption[] => {
    return options.filter(option => {
      return searchFields.some(field => {
        const fieldValue = option[field]
        return fieldValue && fieldValue.toLowerCase().includes(searchLower)
      })
    })
  }

  if (Array.isArray(data) && data.length > 0 && 'options' in data[0]) {
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return (data as SelectGroup[]).map(group => ({
      ...group,
      options: filterOptions(group.options),
    })).filter(group => group.options.length > 0)
  } else {
    // –ü—Ä–æ—Å—Ç—ã–µ –æ–ø—Ü–∏–∏
    return filterOptions(data as SelectOption[])
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ–ø—Ü–∏–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è –≥—Ä—É–ø–ø—ã)
 * @param data - –¥–∞–Ω–Ω—ã–µ
 * @returns –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –æ–ø—Ü–∏–π
 */
export function getAllOptions(data: SelectData): SelectOption[] {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
  if (!data) {
    console.error('getAllOptions: data is undefined or null')
    return []
  }

  if (Array.isArray(data) && data.length > 0 && 'options' in data[0]) {
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return (data as SelectGroup[]).flatMap(group => group.options)
  } else {
    // –ü—Ä–æ—Å—Ç—ã–µ –æ–ø—Ü–∏–∏
    return data as SelectOption[]
  }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –æ–ø—Ü–∏—é –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
 * @param data - –¥–∞–Ω–Ω—ã–µ
 * @param value - –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @returns –Ω–∞–π–¥–µ–Ω–Ω–∞—è –æ–ø—Ü–∏—è –∏–ª–∏ undefined
 */
export function findOptionByValue(data: SelectData, value: string): SelectOption | undefined {
  const allOptions = getAllOptions(data)
  return allOptions.find(option => option.value === value)
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 * @param data - –¥–∞–Ω–Ω—ã–µ
 * @param selectedValues - –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
 * @param maxDisplay - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * @returns –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
 */
export function getDisplayText(
  data: SelectData,
  selectedValues: string[],
  maxDisplay: number = 3
): string {
  if (selectedValues.length === 0) {
    return ''
  }

  if (selectedValues.length === 1) {
    const option = findOptionByValue(data, selectedValues[0])
    return option?.label || selectedValues[0]
  }

  const displayOptions = selectedValues
    .slice(0, maxDisplay)
    .map(value => findOptionByValue(data, value)?.label || value)

  if (selectedValues.length <= maxDisplay) {
    return displayOptions.join(', ')
  }

  return `${displayOptions.join(', ')} +${selectedValues.length - maxDisplay}`
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π
 * @param option - –æ–ø—Ü–∏—è
 * @param selectedValues - –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
 * @returns true –µ—Å–ª–∏ –æ–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞
 */
export function isOptionSelected(option: SelectOption, selectedValues: string[]): boolean {
  return selectedValues.includes(option.value)
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –æ–ø—Ü–∏–∏ –≤ –ø–ª–æ—Å–∫–æ–º —Å–ø–∏—Å–∫–µ
 * @param data - –¥–∞–Ω–Ω—ã–µ
 * @param value - –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—Ü–∏–∏
 * @returns –∏–Ω–¥–µ–∫—Å –∏–ª–∏ -1 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
 */
export function getOptionIndex(data: SelectData, value: string): number {
  const allOptions = getAllOptions(data)
  return allOptions.findIndex(option => option.value === value)
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ü–∏—é –ø–æ –∏–Ω–¥–µ–∫—Å—É
 * @param data - –¥–∞–Ω–Ω—ã–µ
 * @param index - –∏–Ω–¥–µ–∫—Å
 * @returns –æ–ø—Ü–∏—è –∏–ª–∏ undefined
 */
export function getOptionByIndex(data: SelectData, index: number): SelectOption | undefined {
  const allOptions = getAllOptions(data)
  return allOptions[index]
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º Select
 * @param initialValues - –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
 * @param multiSelect - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
 * @returns –æ–±—ä–µ–∫—Ç —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
 */
export function useSelectState(
  initialValues: string[] = [],
  multiSelect: boolean = false
): [SelectState, SelectActions] {
  const [state, setState] = useState<SelectState>({
    isOpen: false,
    searchValue: '',
    selectedValues: initialValues,
    highlightedIndex: -1,
  })

  const actions: SelectActions = {
    open: () => setState((prev: SelectState) => ({ ...prev, isOpen: true })),
    close: () => setState((prev: SelectState) => ({ ...prev, isOpen: false, searchValue: '' })),
    toggle: () => setState((prev: SelectState) => ({ ...prev, isOpen: !prev.isOpen })),
    setSearchValue: (value: string) => setState((prev: SelectState) => ({ ...prev, searchValue: value })),
    selectValue: (value: string) => {
      setState((prev: SelectState) => {
        if (multiSelect) {
          const newValues = prev.selectedValues.includes(value)
            ? prev.selectedValues.filter((v: string) => v !== value)
            : [...prev.selectedValues, value]
          return { ...prev, selectedValues: newValues }
        } else {
          return { ...prev, selectedValues: [value], isOpen: false, searchValue: '' }
        }
      })
    },
    deselectValue: (value: string) => {
      setState((prev: SelectState) => ({
        ...prev,
        selectedValues: prev.selectedValues.filter((v: string) => v !== value)
      }))
    },
    clearSelection: () => {
      setState((prev: SelectState) => ({ ...prev, selectedValues: [] }))
    },
    highlightIndex: (index: number) => {
      setState((prev: SelectState) => ({ ...prev, highlightedIndex: index }))
    },
    highlightNext: () => {
      setState((prev: SelectState) => ({ ...prev, highlightedIndex: prev.highlightedIndex + 1 }))
    },
    highlightPrevious: () => {
      setState((prev: SelectState) => ({ ...prev, highlightedIndex: Math.max(-1, prev.highlightedIndex - 1) }))
    },
  }

  return [state, actions]
}

/**
 * –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
export const demoSelectData = {
  countries: [
    { value: 'ru', label: '–†–æ—Å—Å–∏—è', icon: 'üá∑üá∫' },
    { value: 'us', label: '–°–®–ê', icon: 'üá∫üá∏' },
    { value: 'gb', label: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', icon: 'üá¨üáß' },
    { value: 'de', label: '–ì–µ—Ä–º–∞–Ω–∏—è', icon: 'üá©üá™' },
    { value: 'fr', label: '–§—Ä–∞–Ω—Ü–∏—è', icon: 'üá´üá∑' },
    { value: 'it', label: '–ò—Ç–∞–ª–∏—è', icon: 'üáÆüáπ' },
    { value: 'es', label: '–ò—Å–ø–∞–Ω–∏—è', icon: 'üá™üá∏' },
    { value: 'cn', label: '–ö–∏—Ç–∞–π', icon: 'üá®üá≥' },
    { value: 'jp', label: '–Ø–ø–æ–Ω–∏—è', icon: 'üáØüáµ' },
    { value: 'kr', label: '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', icon: 'üá∞üá∑' },
  ] as SelectOption[],

  groupedCategories: [
    {
      label: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
      options: [
        { value: 'smartphone', label: '–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã', description: '–ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' },
        { value: 'laptop', label: '–ù–æ—É—Ç–±—É–∫–∏', description: '–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã' },
        { value: 'tablet', label: '–ü–ª–∞–Ω—à–µ—Ç—ã', description: '–ü–ª–∞–Ω—à–µ—Ç–Ω—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã' },
      ]
    },
    {
      label: '–û–¥–µ–∂–¥–∞',
      options: [
        { value: 'shirt', label: '–§—É—Ç–±–æ–ª–∫–∏', description: '–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞' },
        { value: 'pants', label: '–ë—Ä—é–∫–∏', description: '–ù–∏–∂–Ω—è—è –æ–¥–µ–∂–¥–∞' },
        { value: 'shoes', label: '–û–±—É–≤—å', description: '–û–±—É–≤–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è' },
      ]
    },
    {
      label: '–°–ø–æ—Ä—Ç',
      options: [
        { value: 'football', label: '–§—É—Ç–±–æ–ª', description: '–ö–æ–º–∞–Ω–¥–Ω—ã–π —Å–ø–æ—Ä—Ç' },
        { value: 'basketball', label: '–ë–∞—Å–∫–µ—Ç–±–æ–ª', description: '–ò–≥—Ä–∞ —Å –º—è—á–æ–º' },
        { value: 'tennis', label: '–¢–µ–Ω–Ω–∏—Å', description: '–†–∞–∫–µ—Ç–æ—á–Ω—ã–π —Å–ø–æ—Ä—Ç' },
      ]
    },
  ] as SelectGroup[],
} 